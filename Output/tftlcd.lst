C51 COMPILER V9.60.0.0   TFTLCD                                                            01/14/2022 13:04:02 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE TFTLCD
OBJECT MODULE PLACED IN .\output\tftlcd.obj
COMPILER INVOKED BY: D:\2filerj\keil5ForC51\C51\BIN\C51.EXE APP\tftlcd\tftlcd.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\
                    -User;.\Public;.\GUI;.\APP\tftlcd;.\APP\touch) DEBUG OBJECTEXTEND PRINT(.\output\tftlcd.lst) TABS(2) OBJECT(.\output\tftl
                    -cd.obj)

line level    source

   1          #include "tftlcd.h"
   2          #include "font.h" 
   3          #include "uart.h"
   4          #include "stdlib.h"
   5          
   6          
   7          
   8          //LCD的画笔颜色和背景色    
   9          u16 FRONT_COLOR=WHITE;  //画笔颜色
  10          u16 BACK_COLOR=BLACK;  //背景色 
  11          
  12          _tftlcd_data tftlcd_data; 
  13          
  14          void Delay(unsigned int dly)
  15          {
  16   1          unsigned int i,j;
  17   1      
  18   1          for(i=0;i<dly;i++)
  19   1            for(j=0;j<255;j++);
  20   1      }
  21          //写寄存器函数
  22          //cmd:寄存器值
  23          void LCD_WriteCmd(u16 cmd)
  24          {
  25   1      #ifdef TFT20_HX8309
                unsigned char cmdH, cmdL;
                cmdH = cmd >> 8;
                cmdL = cmd & 0x00FF;
              
                TFT_WR = 1;       //初始化WR
                TFT_CS = 0;       //打开片选
                
                TFT_RD = 1;           //选择写
                TFT_RS = 0;       //选择命令
                  
                TFT_DATAPORTH = cmdH; //放置命令数据
                TFT_DATAPORTL = cmdL; //放置命令数据
              
                TFT_WR = 0;       //写入时序
                TFT_WR = 1;
                
                TFT_CS = 1;       //关闭片选
              #endif
  44   1      
  45   1      #ifdef TFT22_R61503B
  46   1        unsigned char cmdH, cmdL;
  47   1        cmdH = cmd >> 8;
  48   1        cmdL = cmd & 0x00FF;
  49   1        
  50   1        
  51   1        TFT_WR = 1;       //初始化WR
  52   1        TFT_CS = 0;       //打开片选
  53   1        
C51 COMPILER V9.60.0.0   TFTLCD                                                            01/14/2022 13:04:02 PAGE 2   

  54   1        TFT_RD = 1;           //选择写
  55   1        TFT_RS = 0;       //选择命令
  56   1        
  57   1        
  58   1        TFT_DATAPORTH = cmdH; //放置命令数据
  59   1        TFT_WR = 0;       //写入时序
  60   1        
  61   1        TFT_WR = 1;
  62   1        TFT_DATAPORTH = cmdL;
  63   1        TFT_WR = 0;       //写入时序
  64   1        TFT_WR = 1;
  65   1        
  66   1        TFT_CS = 1;       //关闭片选 
  67   1      #endif
  68   1      
  69   1      #ifdef TFT22_ILI9225B
                TFT_WR=1;
                TFT_CS=0;
                TFT_RD=1;
                TFT_RS=0;
              
                TFT_DATAPORTH=cmd>>8;
                TFT_WR=0;
                TFT_WR=1;
              
                TFT_DATAPORTH=cmd&0x00ff;
                TFT_WR=0;
                TFT_WR=1;
              
                TFT_CS=1;
              #endif
  85   1      
  86   1      #ifdef TFT24_ST7781R  
                TFT_CS=0;
                TFT_RS=0;
                TFT_DATAPORTH=cmd>>8;
                TFT_DATAPORTL=cmd;
                TFT_WR=0;
                TFT_WR=1;
                TFT_CS=1;
              #endif
  95   1      
  96   1      #ifdef TFT26_R61509V  
                TFT_CS=0;
                TFT_RS=0;
                TFT_DATAPORTH=cmd>>8;
                TFT_DATAPORTL=cmd;
                TFT_WR=0;
                TFT_WR=1;
                TFT_CS=1;
              #endif
 105   1      
 106   1      #ifdef TFT26_ILI9325D 
                TFT_CS=0;
                TFT_RS=0;
                TFT_DATAPORTH=cmd>>8;
                TFT_DATAPORTL=cmd;
                TFT_WR=0;
                TFT_WR=1;
                TFT_CS=1;
              #endif
 115   1      }
C51 COMPILER V9.60.0.0   TFTLCD                                                            01/14/2022 13:04:02 PAGE 3   

 116          
 117          //写数据
 118          //dat:要写入的值
 119          void LCD_WriteData(u16 dat)
 120          {
 121   1      #ifdef TFT20_HX8309
                unsigned char datH, datL;
                datH = dat >> 8;
                datL = dat & 0x00FF;
              
                TFT_WR = 1;       //初始化WR
                TFT_CS = 0;       //打开片选
                
                TFT_RD = 1;           //选择写
                TFT_RS = 1;       //选择发送数据
                  
                TFT_DATAPORTH = datH;  //放置命令数据
                TFT_DATAPORTL = datL;  //放置命令数据
              
                TFT_WR = 0;       //写入时序
                TFT_WR = 1;
                
                TFT_CS = 1;       //关闭片选
              #endif
 140   1      
 141   1      #ifdef TFT22_R61503B
 142   1        unsigned char datH, datL;
 143   1        datH = dat >> 8;
 144   1        datL = dat & 0xFF;
 145   1        
 146   1        TFT_WR = 1;       //初始化WR
 147   1        TFT_CS = 0;       //打开片选
 148   1          
 149   1        TFT_RD = 1;           //选择写
 150   1        TFT_RS = 1;       //选择发送数据
 151   1        
 152   1      
 153   1        TFT_DATAPORTH = datH;  //放置命令数据
 154   1        TFT_WR = 0;       //写入时序
 155   1        TFT_WR = 1;
 156   1      
 157   1        TFT_DATAPORTH = datL; 
 158   1      
 159   1        TFT_WR = 0;       //写入时序
 160   1        TFT_WR = 1;
 161   1        
 162   1         TFT_CS = 1;        //关闭片选
 163   1      #endif
 164   1      #ifdef TFT22_ILI9225B
                TFT_WR=1;
                TFT_CS=0;
                TFT_RD=1;
                TFT_RS=1;
                   
                TFT_DATAPORTH=dat>>8;
                TFT_WR=0;
                TFT_WR=1;
                TFT_DATAPORTH=dat&0x00ff;
                TFT_WR=0;
                TFT_WR=1;
              
                TFT_CS=1; 
C51 COMPILER V9.60.0.0   TFTLCD                                                            01/14/2022 13:04:02 PAGE 4   

              #endif
 179   1      
 180   1      #ifdef TFT24_ST7781R
                TFT_CS=0;
                TFT_RS=1;  
                TFT_DATAPORTH=dat>>8;
                TFT_DATAPORTL=dat;
                TFT_WR=0;
                TFT_WR=1;
                TFT_CS=1; 
              #endif
 189   1      
 190   1      #ifdef TFT26_R61509V
                TFT_CS=0;
                TFT_RS=1;  
                TFT_DATAPORTH=dat>>8;
                TFT_DATAPORTL=dat;
                TFT_WR=0;
                TFT_WR=1;
                TFT_CS=1; 
              #endif  
 199   1      
 200   1      #ifdef TFT26_ILI9325D
                TFT_CS=0;
                TFT_RS=1;  
                TFT_DATAPORTH=dat>>8;
                TFT_DATAPORTL=dat;
                TFT_WR=0;
                TFT_WR=1;
                TFT_CS=1; 
              #endif  
 209   1      }
 210          
 211          void LCD_WriteData_Color(u16 color)
 212          {
 213   1      #ifdef TFT20_HX8309
                unsigned char datH, datL;
                datH = color >> 8;
                datL = color & 0x00FF;
              
                TFT_WR = 1;       //初始化WR
                TFT_CS = 0;       //打开片选
                
                TFT_RD = 1;           //选择写
                TFT_RS = 1;       //选择发送数据
                  
                TFT_DATAPORTH = datH;  //放置命令数据
                TFT_DATAPORTL = datL;  //放置命令数据
              
                TFT_WR = 0;       //写入时序
                TFT_WR = 1;
                
                TFT_CS = 1;       //关闭片选
              #endif
 232   1      
 233   1      #ifdef TFT22_R61503B
 234   1         unsigned char datH, datL;
 235   1        datH = color >> 8;
 236   1        datL = color & 0xFF;
 237   1        
 238   1        TFT_WR = 1;       //初始化WR
 239   1        TFT_CS = 0;       //打开片选
C51 COMPILER V9.60.0.0   TFTLCD                                                            01/14/2022 13:04:02 PAGE 5   

 240   1          
 241   1        TFT_RD = 1;           //选择写
 242   1        TFT_RS = 1;       //选择发送数据
 243   1        
 244   1      
 245   1        TFT_DATAPORTH = datH;  //放置命令数据
 246   1        TFT_WR = 0;       //写入时序
 247   1        TFT_WR = 1;
 248   1      
 249   1        TFT_DATAPORTH = datL; 
 250   1      
 251   1        TFT_WR = 0;       //写入时序
 252   1        TFT_WR = 1;
 253   1        
 254   1         TFT_CS = 1;        //关闭片选
 255   1      #endif
 256   1      #ifdef TFT22_ILI9225B
                TFT_WR=1;
                TFT_CS=0;
                TFT_RD=1;
                TFT_RS=1;
                   
                TFT_DATAPORTH=color>>8;
                TFT_WR=0;
                TFT_WR=1;
                TFT_DATAPORTH=color&0x00ff;
                TFT_WR=0;
                TFT_WR=1;
              
                TFT_CS=1; 
              #endif
 271   1      
 272   1      #ifdef TFT24_ST7781R
                TFT_CS=0;
                TFT_RS=1;  
                TFT_DATAPORTH=color>>8;
                TFT_DATAPORTL=color;
                TFT_WR=0;
                TFT_WR=1;
                TFT_CS=1; 
              #endif
 281   1      
 282   1      #ifdef TFT26_R61509V
                TFT_CS=0;
                TFT_RS=1;  
                TFT_DATAPORTH=color>>8;
                TFT_DATAPORTL=color;
                TFT_WR=0;
                TFT_WR=1;
                TFT_CS=1; 
              #endif
 291   1      
 292   1      #ifdef TFT26_ILI9325D
                TFT_CS=0;
                TFT_RS=1;  
                TFT_DATAPORTH=color>>8;
                TFT_DATAPORTL=color;
                TFT_WR=0;
                TFT_WR=1;
                TFT_CS=1; 
              #endif  
 301   1      }
C51 COMPILER V9.60.0.0   TFTLCD                                                            01/14/2022 13:04:02 PAGE 6   

 302          
 303          void LCD_WriteCmdData(u16 cmd,u16 dat)
 304          {
 305   1        LCD_WriteCmd(cmd);
 306   1        LCD_WriteData(dat);
 307   1      }
 308          
 309          //读数据
 310          //返回值:读到的值
 311          u16 LCD_ReadData(void)
 312          {
 313   1        u16 ram;
 314   1      
 315   1        TFT_DATAPORTH=0xff;
 316   1        TFT_DATAPORTL=0xff;
 317   1      
 318   1      #ifdef TFT20_HX8309
                TFT_CS=0;
                TFT_RS=1;
                TFT_RD=0;
                _nop_();
                ram=TFT_DATAPORTH;
                ram<<=8;
                ram|=TFT_DATAPORTL;
                TFT_RD=1; 
                TFT_CS=1;
              #endif
 329   1      
 330   1      #ifdef TFT22_R61503B
 331   1        
 332   1        TFT_CS=0;
 333   1        TFT_RS=1;
 334   1        TFT_RD=0;
 335   1        _nop_();
 336   1        ram=TFT_DATAPORTH;
 337   1        ram<<=8;  
 338   1      
 339   1        TFT_RD=1; 
 340   1        TFT_RD=0;
 341   1        _nop_();
 342   1        ram|=TFT_DATAPORTH;
 343   1        TFT_RD=1;
 344   1        TFT_CS=1;
 345   1      #endif
 346   1      
 347   1      #ifdef TFT22_ILI9225B
                TFT_CS=0;
                TFT_RS=1;
                TFT_RD=0;
                _nop_();
                ram=TFT_DATAPORTH;
                ram<<=8;  
              
                TFT_RD=1; 
                TFT_RD=0;
                _nop_();
                ram|=TFT_DATAPORTH;
                TFT_RD=1;
                TFT_CS=1;
              #endif
 362   1      
 363   1      #ifdef TFT24_ST7781R
C51 COMPILER V9.60.0.0   TFTLCD                                                            01/14/2022 13:04:02 PAGE 7   

                TFT_CS=0;
                TFT_RS=1;
                TFT_RD=0;
                _nop_();
                ram=TFT_DATAPORTH;
                ram<<=8;
                ram|=TFT_DATAPORTL;  
                TFT_RD=1;
                TFT_CS=1;
              #endif
 374   1      
 375   1      #ifdef TFT26_R61509V
                TFT_CS=0;
                TFT_RS=1;
                TFT_RD=0;
                _nop_();
                ram=TFT_DATAPORTH;
                ram<<=8;
                ram|=TFT_DATAPORTL;
                TFT_RD=1; 
                TFT_CS=1;
              #endif
 386   1      
 387   1      #ifdef TFT26_ILI9325D
                TFT_CS=0;
                TFT_RS=1;
                TFT_RD=0;
                _nop_();
                ram=TFT_DATAPORTH;
                ram<<=8;
                ram|=TFT_DATAPORTL;
                TFT_RD=1; 
                TFT_CS=1;
              #endif
 398   1      
 399   1        return ram; 
 400   1      }
 401          
 402          //设置LCD显示方向
 403          //dir:0,竖屏；1,横屏
 404          void LCD_Display_Dir(u8 dir)
 405          {
 406   1        tftlcd_data.dir=dir;
 407   1        if(dir==0)  //默认竖屏方向
 408   1        {
 409   2      #ifdef TFT20_HX8309
                  LCD_WriteCmdData(0x0001,0x011b); //Output Direct
              #endif
 412   2      #ifdef TFT22_R61503B
 413   2          LCD_WriteCmdData(0x0001,0x0500); //Output Direct
 414   2          LCD_WriteCmdData(0x0003, 0x1030);   //设置彩屏显示方向的寄存器
 415   2      #endif
 416   2      #ifdef TFT22_ILI9225B   
                  LCD_WriteCmdData(0x0001, 0x011C); //Output Direct
                  LCD_WriteCmdData(0x0003, 0x1030);   //设置彩屏显示方向的寄存器
              #endif
 420   2      
 421   2      #ifdef TFT24_ST7781R    
                  LCD_WriteCmdData(0x0001, 0x0100); //Output Direct
                  LCD_WriteCmd(0x0003);   //设置彩屏显示方向的寄存器
                  LCD_WriteData(0x5030);
              #endif
C51 COMPILER V9.60.0.0   TFTLCD                                                            01/14/2022 13:04:02 PAGE 8   

 426   2      
 427   2      #ifdef TFT26_R61509V    
                  LCD_WriteCmdData(0x0001, 0x0100); //Output Direct
                  LCD_WriteCmdData(0x0003, 0x1030);   //设置彩屏显示方向的寄存器
              #endif
 431   2      
 432   2      #ifdef TFT26_ILI9325D   
                  LCD_WriteCmdData(0x0001, 0x0100); //Output Direct
                  LCD_WriteCmdData(0x0003, 0x1030);   //设置彩屏显示方向的寄存器
              #endif
 436   2      
 437   2          tftlcd_data.height=HEIGHT;
 438   2          tftlcd_data.width=WIDTH;    
 439   2        }
 440   1        else
 441   1        {
 442   2      #ifdef TFT20_HX8309
                    LCD_WriteCmdData(0x0001, 0x001b); //Output Direct
              #endif
 445   2      
 446   2      #ifdef TFT22_R61503B
 447   2            LCD_WriteCmdData(0x0001, 0x0400); //Output Direct
 448   2          LCD_WriteCmdData(0x0003, 0x1038);   //设置彩屏显示方向的寄存器#endif
 449   2      #endif
 450   2      
 451   2      #ifdef TFT22_ILI9225B   
                  LCD_WriteCmdData(0x0001, 0x031C); //Output Direct
                  LCD_WriteCmdData(0x0003, 0x1038);   //设置彩屏显示方向的寄存器#endif
              #endif
 455   2      
 456   2      #ifdef TFT24_ST7781R
                  LCD_WriteCmdData(0x0001, 0x0000); //Output Direct   
                  LCD_WriteCmd(0x0003);   //设置彩屏显示方向的寄存器
                  LCD_WriteData(0x5038);
              #endif
 461   2      
 462   2      #ifdef TFT26_R61509V    
                  LCD_WriteCmdData(0x0001, 0x0000); //Output Direct
                  LCD_WriteCmdData(0x0003, 0x1038);   //设置彩屏显示方向的寄存器
              #endif
 466   2      
 467   2      #ifdef TFT26_ILI9325D   
                  LCD_WriteCmdData(0x0001, 0x0000); //Output Direct
                  LCD_WriteCmdData(0x0003, 0x1038);   //设置彩屏显示方向的寄存器
              #endif
 471   2      
 472   2            tftlcd_data.height=WIDTH;
 473   2          tftlcd_data.width=HEIGHT;
 474   2        }
 475   1      }
 476          
 477          
 478          void TFTLCD_Init(void)
 479          {
 480   1        u16 i=0;
 481   1        TFT_RST=1;  
 482   1        delay_ms(100);
 483   1        
 484   1        TFT_RST=0;
 485   1        delay_ms(100);
 486   1      
 487   1        TFT_RST=1;
C51 COMPILER V9.60.0.0   TFTLCD                                                            01/14/2022 13:04:02 PAGE 9   

 488   1        delay_ms(100);
 489   1      
 490   1      #ifdef TFT20_HX8309
                LCD_WriteCmd(0X0000);         
                tftlcd_data.id=LCD_ReadData(); 
              #endif
 494   1      
 495   1      #ifdef TFT22_R61503B
 496   1        LCD_WriteCmd(0X0000);         
 497   1        tftlcd_data.id=LCD_ReadData(); 
 498   1      #endif  
 499   1        #ifdef TFT22_ILI9225B 
                LCD_WriteCmd(0X0000);         
                tftlcd_data.id=LCD_ReadData();    
              #endif
 503   1      
 504   1      #ifdef TFT24_ST7781R  
                LCD_WriteCmd(0X0000);         
                tftlcd_data.id=LCD_ReadData();    
              #endif
 508   1      
 509   1      #ifdef TFT26_R61509V  
                LCD_WriteCmd(0X0000);         
                tftlcd_data.id=LCD_ReadData();    
              #endif
 513   1      
 514   1      #ifdef TFT26_ILI9325D 
                LCD_WriteCmd(0X0000);         
                tftlcd_data.id=LCD_ReadData();    
              #endif
 518   1      
 519   1        //printf(" LCD ID:%x\r\n",tftlcd_data.id); //打印LCD ID
 520   1        
 521   1      #ifdef TFT20_HX8309
                LCD_WriteCmd(0x0010);LCD_WriteData(0x0000); 
                LCD_WriteCmd(0x0011);LCD_WriteData(0x0000);        
                LCD_WriteCmd(0x0012);LCD_WriteData(0x0000);  
                LCD_WriteCmd(0x0013);LCD_WriteData(0x0000); 
                LCD_WriteCmd(0x0000);LCD_WriteData(0x0001);
                for(i=5000; i>0; i--);
                LCD_WriteCmd(0x0011);LCD_WriteData(0x0001); 
                LCD_WriteCmd(0x0013);LCD_WriteData(0x141c); 
                LCD_WriteCmd(0x0012);LCD_WriteData(0x0018);
                LCD_WriteCmd(0x0010);LCD_WriteData(0x0044);
                for(i=5000; i>0; i--);
                //LCD_WriteCmd(0x0011);LCD_WriteData(0x0000); 
                LCD_WriteCmd(0x0010);LCD_WriteData(0x0040);        
                //LCD_WriteCmd(0x0012);LCD_WriteData(0x0013);  
                LCD_WriteCmd(0x0013);LCD_WriteData(0x3413);    
                for(i=5000; i>0; i--);
                LCD_WriteCmd(0x0008);LCD_WriteData(0x0808);
                LCD_WriteCmd(0x0009);LCD_WriteData(0x0001);
                LCD_WriteCmd(0x000b);LCD_WriteData(0x0000);
                //  LCD_WriteCmd(0x000c);LCD_WriteData(0x0000);
                LCD_WriteCmd(0x0021);LCD_WriteData(0x0000);
                LCD_WriteCmd(0x0023);LCD_WriteData(0x0000); 
                LCD_WriteCmd(0x0024);LCD_WriteData(0x0000);
                
                LCD_WriteCmd(0x0030);LCD_WriteData(0x0000);
                LCD_WriteCmd(0x0031);LCD_WriteData(0x0000);
                LCD_WriteCmd(0x0032);LCD_WriteData(0x0007);
                LCD_WriteCmd(0x0033);LCD_WriteData(0x0007);
C51 COMPILER V9.60.0.0   TFTLCD                                                            01/14/2022 13:04:02 PAGE 10  

                LCD_WriteCmd(0x0034);LCD_WriteData(0x0);
                LCD_WriteCmd(0x0035);LCD_WriteData(0x0);
                LCD_WriteCmd(0x0036);LCD_WriteData(0x0);
                LCD_WriteCmd(0x0037);LCD_WriteData(0x0);
                LCD_WriteCmd(0x0038);LCD_WriteData(0x0);
                LCD_WriteCmd(0x0039);LCD_WriteData(0x0);
                
                LCD_WriteCmd(0x0001);LCD_WriteData(0x011b); 
                LCD_WriteCmd(0x0002);LCD_WriteData(0x0700);
                LCD_WriteCmd(0x0003);LCD_WriteData(0x6030);
                LCD_WriteCmd(0x0004);LCD_WriteData(0x0000);
                LCD_WriteCmd(0x0005);LCD_WriteData(0x0000);
                
                LCD_WriteCmd(0x0040);LCD_WriteData(0x0000);
                LCD_WriteCmd(0x0041);LCD_WriteData(0x00af);
                
                LCD_WriteCmd(0x0042);LCD_WriteData(0xdb00);
                LCD_WriteCmd(0x0043);LCD_WriteData(0xdb00);
                LCD_WriteCmd(0x0044);LCD_WriteData(0xaf00);
                LCD_WriteCmd(0x0045);LCD_WriteData(0xdb00);
                
                LCD_WriteCmd(0x0010);LCD_WriteData(0x4040);
                LCD_WriteCmd(0x0007);LCD_WriteData(0x0005);
                for(i=5000; i>0; i--);
                LCD_WriteCmd(0x0007);LCD_WriteData(0x0025);
                for(i=5000; i>0; i--);
                LCD_WriteCmd(0x0007);LCD_WriteData(0x0027);
                for(i=5000; i>0; i--);
                LCD_WriteCmd(0x0007);LCD_WriteData(0x0037);
                for(i=5000; i>0; i--);
                LCD_WriteCmd(0x0022);
              #endif
 582   1      
 583   1      #ifdef TFT22_R61503B
 584   1        
 585   1          LCD_WriteCmd(0x0000);LCD_WriteData(0x0001);
 586   1        delay_10us(10);
 587   1        LCD_WriteCmd(0x0007);LCD_WriteCmd(0x0000);
 588   1        LCD_WriteCmd(0x0012);LCD_WriteCmd(0x0000);
 589   1        LCD_WriteCmd(0x00a4);LCD_WriteCmd(0x0001);
 590   1        delay_10us(10);
 591   1        LCD_WriteCmd(0x0070);LCD_WriteData(0x9b00);
 592   1        LCD_WriteCmd(0x0007);LCD_WriteData(0x0031);
 593   1        LCD_WriteCmd(0x0018);LCD_WriteData(0x0001);
 594   1        
 595   1        LCD_WriteCmd(0x0010);LCD_WriteData(0x11b0); 
 596   1        LCD_WriteCmd(0x0011);LCD_WriteData(0x0007);        
 597   1        LCD_WriteCmd(0x0012);LCD_WriteData(0x1017);  
 598   1        LCD_WriteCmd(0x0013);LCD_WriteData(0x850d); 
 599   1        LCD_WriteCmd(0x0014);LCD_WriteData(0x8000); 
 600   1        LCD_WriteCmd(0x0012);LCD_WriteData(0x103c);  
 601   1        Delay(150);
 602   1        
 603   1        
 604   1        LCD_WriteCmd(0x0001);LCD_WriteData(0x0500);
 605   1        LCD_WriteCmd(0x0002);LCD_WriteData(0x0700);
 606   1        LCD_WriteCmd(0x0003);LCD_WriteData(0x1030);
 607   1        
 608   1        LCD_WriteCmd(0x0008);LCD_WriteData(0x0808);
 609   1        LCD_WriteCmd(0x000b);LCD_WriteData(0x1100);
 610   1        LCD_WriteCmd(0x000c);LCD_WriteData(0x0000);
 611   1        LCD_WriteCmd(0x000f);LCD_WriteData(0x1401);
C51 COMPILER V9.60.0.0   TFTLCD                                                            01/14/2022 13:04:02 PAGE 11  

 612   1        
 613   1        LCD_WriteCmd(0x0015);LCD_WriteData(0x0000);
 614   1        LCD_WriteCmd(0x0020);LCD_WriteData(0x0000);
 615   1        LCD_WriteCmd(0x0021);LCD_WriteData(0x0000);
 616   1      
 617   1      //  LCD_WriteCmd(0x0030);LCD_WriteData(0x0f0f);
 618   1      //  LCD_WriteCmd(0x0031);LCD_WriteData(0x0a0b);
 619   1      //  LCD_WriteCmd(0x0032);LCD_WriteData(0x0c0e);
 620   1      //  LCD_WriteCmd(0x0033);LCD_WriteData(0x0d0d);
 621   1      //  LCD_WriteCmd(0x0034);LCD_WriteData(0x0a0a);
 622   1      //  LCD_WriteCmd(0x0035);LCD_WriteData(0x0909);
 623   1      //  LCD_WriteCmd(0x0036);LCD_WriteData(0x0c0c);
 624   1      //  LCD_WriteCmd(0x0037);LCD_WriteData(0x0f0c);
 625   1      //  LCD_WriteCmd(0x0038);LCD_WriteData(0x0606);
 626   1      //  LCD_WriteCmd(0x0039);LCD_WriteData(0x0606);
 627   1      
 628   1        LCD_WriteCmd(0x0050);LCD_WriteData(0x0000);
 629   1        LCD_WriteCmd(0x0051);LCD_WriteData(0x00af);
 630   1        LCD_WriteCmd(0x0052);LCD_WriteData(0x0000);
 631   1        LCD_WriteCmd(0x0053);LCD_WriteData(0x00db);
 632   1        
 633   1        LCD_WriteCmd(0x0070);LCD_WriteData(0x1b00);
 634   1        LCD_WriteCmd(0x0071);LCD_WriteData(0x0000);
 635   1        
 636   1        LCD_WriteCmd(0x0090);LCD_WriteData(0x0000);
 637   1        LCD_WriteCmd(0x0091);LCD_WriteData(0x0100);
 638   1        LCD_WriteCmd(0x0092);LCD_WriteData(0x0001);
 639   1        LCD_WriteCmd(0x0059);LCD_WriteData(0x050c);
 640   1        LCD_WriteCmd(0x0090);LCD_WriteData(0x0010);
 641   1        LCD_WriteCmd(0x0092);LCD_WriteData(0x0600);
 642   1      
 643   1        LCD_WriteCmd(0x0007);LCD_WriteData(0x0233);
 644   1        Delay(50);
 645   1      //  LCD_WriteCmd(0x0007);LCD_WriteData(0x0133);
 646   1      //  Delay(50);
 647   1      
 648   1        LCD_WriteCmd(0x0022);
 649   1      #endif  
 650   1      
 651   1         
 652   1      #ifdef TFT22_ILI9225B
                LCD_WriteCmdData(0x0001, 0x011C); // set SS and NL bit
                LCD_WriteCmdData(0x0002, 0x0100); // set 1 line inversion
                LCD_WriteCmdData(0x0003, 0x1030); // set GRAM write direction and BGR=1.
                LCD_WriteCmdData(0x0008, 0x0808); // set BP and FP
                LCD_WriteCmdData(0x000C, 0x0000); // RGB interface setting R0Ch=0x0110 for RGB 18Bit and R0Ch=0111for RGB
             -16Bit
                LCD_WriteCmdData(0x000F, 0x0B01); // Set frame rate
                LCD_WriteCmdData(0x0020, 0x0000); // Set GRAM Address
                LCD_WriteCmdData(0x0021, 0x0000); // Set GRAM Address
                //*************Power On sequence ****************//
                delay_ms(50); // Delay 50ms
                LCD_WriteCmdData(0x0010, 0x0A00); // Set SAP,DSTB,STB
                LCD_WriteCmdData(0x0011, 0x1038); // Set APON,PON,AON,VCI1EN,VC
                delay_ms(50); // Delay 50ms
                LCD_WriteCmdData(0x0012, 0x2121); // Internal reference voltage= Vci;
                LCD_WriteCmdData(0x0013, 0x007A); // Set GVDD
                LCD_WriteCmdData(0x0014, 0x595c); // Set VCOMH/VCOML voltage      
                //------------- Set GRAM area ------------------//
                LCD_WriteCmdData(0x0030, 0x0000);
                LCD_WriteCmdData(0x0031, 0x00DB);
                LCD_WriteCmdData(0x0032, 0x0000);
C51 COMPILER V9.60.0.0   TFTLCD                                                            01/14/2022 13:04:02 PAGE 12  

                LCD_WriteCmdData(0x0033, 0x0000);
                LCD_WriteCmdData(0x0034, 0x00DB);
                LCD_WriteCmdData(0x0035, 0x0000);
                LCD_WriteCmdData(0x0036, 0x00AF);
                LCD_WriteCmdData(0x0037, 0x0000);
                LCD_WriteCmdData(0x0038, 0x00DB);
                LCD_WriteCmdData(0x0039, 0x0000);
                
                // ----------- Adjust the Gamma Curve ----------//
                LCD_WriteCmdData(0x0050, 0x0000);
                LCD_WriteCmdData(0x0051, 0x0704);
                LCD_WriteCmdData(0x0052, 0x0C08);
                LCD_WriteCmdData(0x0053, 0x0502);
                LCD_WriteCmdData(0x0054, 0x080C);
                LCD_WriteCmdData(0x0055, 0x0407);
                LCD_WriteCmdData(0x0056, 0x0000);
                LCD_WriteCmdData(0x0057, 0x0205);
                LCD_WriteCmdData(0x0058, 0x0000);
                LCD_WriteCmdData(0x0059, 0x0000);
                
                delay_ms(50); // Delay 50ms
                LCD_WriteCmdData(0x0007, 0x1017);
              
              #endif
 697   1      
 698   1      #ifdef TFT24_ST7781R
                //ST7781R_HSD2.4
                //------------------------------------Display Control Setting--------------------------------------------
             ---//
                LCD_WriteCmdData(0x0001, 0x0100); //Output Direct
                LCD_WriteCmdData(0x0002, 0x0700); //Line Inversion
                LCD_WriteCmdData(0x0003, 0x5030); //Entry Mode (262K, BGR)
                LCD_WriteCmdData(0x0004, 0x0000); //Resize Control
                LCD_WriteCmdData(0x0008, 0x0302); //Display Control2 (Porch Setting)
                LCD_WriteCmdData(0x0009, 0x0000); //Display Control3
                LCD_WriteCmdData(0x000A, 0x0000); //Display Control4
                LCD_WriteCmdData(0x000C, 0x0000); // RGB Display Interface Control1
                LCD_WriteCmdData(0x000D, 0x0000); //Frame Marker Position
                LCD_WriteCmdData(0x000F, 0x0000); // RGB Display Interface Control2
                //-----------------------------------End Display Control setting-----------------------------------------
             -//
                delay_ms(100);
                //-------------------------------- Power Control Registers Initial --------------------------------------
             -//
                LCD_WriteCmdData(0x0010, 0x10E0); //Power Control1
                //---------------------------------End Power Control Registers Initial -------------------------------//
                delay_ms(100); //Delay 100ms
                //-------------------------------------Gamma Cluster Setting-------------------------------------------//
                LCD_WriteCmdData(0x0030, 0x0000);
                LCD_WriteCmdData(0x0031, 0x0406);
                LCD_WriteCmdData(0x0032, 0x0302);
                LCD_WriteCmdData(0x0035, 0x0006);
                LCD_WriteCmdData(0x0036, 0x0700);
                LCD_WriteCmdData(0x0037, 0x0000);
                LCD_WriteCmdData(0x0038, 0x0406);
                LCD_WriteCmdData(0x0039, 0x0302);
                LCD_WriteCmdData(0x003c, 0x0006);
                LCD_WriteCmdData(0x003d, 0x0700);
                //---------------------------------------End Gamma Setting---------------------------------------------//
                //----------------------------------Display Windows 240 X 320----------------------------------------//
                LCD_WriteCmdData(0x0020, 0x0000); // Horizontal Address Start Position
                LCD_WriteCmdData(0x0021, 0x0000); // Vertical Address Start Position
C51 COMPILER V9.60.0.0   TFTLCD                                                            01/14/2022 13:04:02 PAGE 13  

                LCD_WriteCmdData(0x0050, 0x0000); // Horizontal Address Start Position
                LCD_WriteCmdData(0x0051, 0x00ef); // Horizontal Address End Position
                LCD_WriteCmdData(0x0052, 0x0000); // Vertical Address Start Position
                LCD_WriteCmdData(0x0053, 0x013f); // Vertical Address End Position
                //----------------------------------End Display Windows 240 X 320----------------------------------//
                //-------------------------------------------Frame Rate Setting------------------------------------------
             --//
                LCD_WriteCmdData(0x0060, 0xA700); //Gate scan control
                LCD_WriteCmdData(0x0061, 0x0001); //Non-display Area setting
                LCD_WriteCmdData(0x006A, 0x0000); //Vertical Scroll Control
                LCD_WriteCmdData(0x0090, 0x0030); //RTNI setting
                LCD_WriteCmdData(0x0095, 0x021E); //Panel Interface Control 4
                //-------------------------------------------END Frame Rate setting------------------------------------//
                //----------------------------------Partial Image Display Initial----------------------------------------
             -//
                LCD_WriteCmdData(0x0080, 0x0000); // Partial Image 1 Display Position
                LCD_WriteCmdData(0x0081, 0x0000); // Partial Image 1 Area (Start Line)
                LCD_WriteCmdData(0x0082, 0x0000); // Partial Image 1 Area (End Line)
                LCD_WriteCmdData(0x0083, 0x0000); // Partial Image 2 Display Position
                LCD_WriteCmdData(0x0084, 0x0000); // Partial Image 2 Area (Start Line)
                LCD_WriteCmdData(0x0085, 0x0000); // Partial Image 2 Area (End Line)
                //-----------------------------------END Partial Image Display Initial ----------------------------------
             -//
                //--------------------------------- Power Supply Startup 1 Setting------------------------------------//
                LCD_WriteCmdData(0x00FF, 0x0001); //CMD 2 Enable
                LCD_WriteCmdData(0x00B0, 0x310E); //Power Control2
                LCD_WriteCmdData(0x00FF, 0x0000); // CMD 2 Disable
                //--------------------------------- End Power Supply Startup 2 Setting------------------------------//
                delay_ms(100); //Delay 100ms
                LCD_WriteCmdData(0x0007, 0x0133); //Display Control1
                delay_ms(50); //Delay 50ms
                
                LCD_WriteCmd(0x0022);
              #endif
 763   1      
 764   1      #ifdef TFT26_R61509V
                LCD_WriteCmd(0x0000);LCD_WriteData(0x0000); 
                LCD_WriteCmd(0x0000);LCD_WriteData(0x0000);  
                LCD_WriteCmd(0x0000);LCD_WriteData(0x0000);  
                delay_ms(100);
                
                LCD_WriteCmd(0x0400);LCD_WriteData(0x6200); 
                LCD_WriteCmd(0x0008);LCD_WriteData(0x0808); 
                 
                LCD_WriteCmd(0x0300);LCD_WriteData(0x0C00);  
                LCD_WriteCmd(0x0301);LCD_WriteData(0x5A0B);  
                LCD_WriteCmd(0x0302);LCD_WriteData(0x0906); 
                LCD_WriteCmd(0x0303);LCD_WriteData(0x1017);  
                LCD_WriteCmd(0x0304);LCD_WriteData(0x2300);  
                LCD_WriteCmd(0x0305);LCD_WriteData(0x1700);  
                LCD_WriteCmd(0x0306);LCD_WriteData(0x6309); 
                LCD_WriteCmd(0x0307);LCD_WriteData(0x0C09); 
                LCD_WriteCmd(0x0308);LCD_WriteData(0x010C);  
                LCD_WriteCmd(0x0309);LCD_WriteData(0x2232); 
                
                LCD_WriteCmd(0x0010);LCD_WriteData(0x0016);  
                LCD_WriteCmd(0x0011);LCD_WriteData(0x0101);  
                LCD_WriteCmd(0x0012);LCD_WriteData(0x0000);  
                LCD_WriteCmd(0x0013);LCD_WriteData(0x0001); 
                 
                LCD_WriteCmd(0x0100);LCD_WriteData(0x0330);  
                LCD_WriteCmd(0x0101);LCD_WriteData(0x0336);  
C51 COMPILER V9.60.0.0   TFTLCD                                                            01/14/2022 13:04:02 PAGE 14  

                LCD_WriteCmd(0x0103);LCD_WriteData(0x1000); 
                 
                LCD_WriteCmd(0x0280);LCD_WriteData(0x6100); 
                LCD_WriteCmd(0x0102);LCD_WriteData(0xBBB4); 
                delay_ms(100);
                
                LCD_WriteCmd(0x0001);LCD_WriteData(0x0100);  
                LCD_WriteCmd(0x0002);LCD_WriteData(0x0100);  
                LCD_WriteCmd(0x0003);LCD_WriteData(0x1030);  
                LCD_WriteCmd(0x0009);LCD_WriteData(0x0001);  
                LCD_WriteCmd(0x000C);LCD_WriteData(0x0000); 
                LCD_WriteCmd(0x0090);LCD_WriteData(0x0800); 
                LCD_WriteCmd(0x000F);LCD_WriteData(0x0000); 
                
                LCD_WriteCmd(0x0210);LCD_WriteData(0x0000);  
                LCD_WriteCmd(0x0211);LCD_WriteData(0x00EF); 
                LCD_WriteCmd(0x0212);LCD_WriteData(0x0000);  
                LCD_WriteCmd(0x0213);LCD_WriteData(0x018F);         //;400
                
                
                LCD_WriteCmd(0x0500);LCD_WriteData(0x0000);  
                LCD_WriteCmd(0x0501);LCD_WriteData(0x0000);  
                LCD_WriteCmd(0x0502);LCD_WriteData(0x005F);  
                
                LCD_WriteCmd(0x0401);LCD_WriteData(0x0001);  
                LCD_WriteCmd(0x0404);LCD_WriteData(0x0000); 
                delay_ms(100);
                
                LCD_WriteCmd(0x0007);LCD_WriteData(0x0100); 
                delay_ms(100);
                  
                LCD_WriteCmd(0x0202);
              #endif
 824   1      
 825   1      #ifdef TFT26_ILI9325D
                //************* Start Initial Sequence **********// 
                LCD_WriteCmdData(0x0001, 0x0100); // set SS  and SM bit 
                LCD_WriteCmdData(0x0002, 0x0200); // set 1 line inversion 
                LCD_WriteCmdData(0x0003, 0x1030); // set GRAM write direction and BGR=1. 
                LCD_WriteCmdData(0x0004, 0x0000); // Resize register 
                LCD_WriteCmdData(0x0008, 0x0202); // set theback porch and front porch 
                LCD_WriteCmdData(0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0] 
                LCD_WriteCmdData(0x000A, 0x0000); // FMARK function 
                LCD_WriteCmdData(0x000C, 0x0000); // RGB interface setting 
                LCD_WriteCmdData(0x000D, 0x0000); // Frame marker Position 
                LCD_WriteCmdData(0x000F, 0x0000); // RGB int erface polarity 
                //*************Power On sequence **************** // 
                LCD_WriteCmdData(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB 
                LCD_WriteCmdData(0x0011, 0x0007); // DC1[2:0 ], DC0[2:0], VC[2:0] 
                LCD_WriteCmdData(0x0012, 0x0000); // VREG1OUT voltage 
                LCD_WriteCmdData(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude 
                delay_ms(10);                         // Dis-charge capacitor power voltage 
                LCD_WriteCmdData(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB 
                LCD_WriteCmdData(0x0011, 0x0227); // R11h=0x 0221 at VCI=3.3V, DC1[2:0], DC0[2:0], VC[2:0] 
                delay_ms(10);                          // Delay 50ms 
                LCD_WriteCmdData(0x0012, 0x008D); // External reference voltage= Vci; 
                delay_ms(10);                          // Delay 50ms 
                LCD_WriteCmdData(0x0013, 0x1200); // VDV[4:0] for VCOM amplitude 
                LCD_WriteCmdData(0x0029, 0x0005); // VCM[5:0] for VCOMH 
                LCD_WriteCmdData(0x002B, 0x000C); // Frame Rate = 91Hz 
                delay_ms(10);                          // Delay 50ms 
                LCD_WriteCmdData(0x0020, 0x0000); // GRAM horizontal Address 
C51 COMPILER V9.60.0.0   TFTLCD                                                            01/14/2022 13:04:02 PAGE 15  

                LCD_WriteCmdData(0x0021, 0x0000); // GRAM Vertical Address 
                // ----------- Adjust the Gamma Curve ----------// 
                //a-Si TFT LCD Single Chip Driver 
                //240RGBx320 Resolution and 262K color  ILI9325D
                //The information contained herein is the exclusive property of ILI Technology Corp. and shall not be dis
             -tributed, reproduced, or disclosed in 
                //whole or in part without prior written permission of ILI Technology Corp.
                //Page 24 of 26  V0.14
                LCD_WriteCmdData(0x0030, 0x0000); 
                LCD_WriteCmdData(0x0031, 0x0303); 
                LCD_WriteCmdData(0x0032, 0x0103); 
                LCD_WriteCmdData(0x0035, 0x0103); 
                LCD_WriteCmdData(0x0036, 0x0004); 
                LCD_WriteCmdData(0x0037, 0x0406); 
                LCD_WriteCmdData(0x0038, 0x0404); 
                LCD_WriteCmdData(0x0039, 0x0707); 
                LCD_WriteCmdData(0x003C, 0x0301); 
                LCD_WriteCmdData(0x003D, 0x0004); 
                //------------------ Set GRAM area ---------------// 
                LCD_WriteCmdData(0x0050, 0x0000); // Horizontal GRAM Start Address 
                LCD_WriteCmdData(0x0051, 0x00EF); // Horizontal GRAM End Address 
                LCD_WriteCmdData(0x0052, 0x0000); // Vertical GRAM Start Address 
                LCD_WriteCmdData(0x0053, 0x013F); // Vertical GRAM Start Address 
                LCD_WriteCmdData(0x0060, 0xA700); // Gate Sc an Line 
                LCD_WriteCmdData(0x0061, 0x0001); // NDL,VLE, REV 
                LCD_WriteCmdData(0x006A, 0x0000); // set scrolling line 
                //-------------- Partial Display Control ---------// 
                LCD_WriteCmdData(0x0080, 0x0000); 
                LCD_WriteCmdData(0x0081, 0x0000); 
                LCD_WriteCmdData(0x0082, 0x0000); 
                LCD_WriteCmdData(0x0083, 0x0000); 
                LCD_WriteCmdData(0x0084, 0x0000); 
                LCD_WriteCmdData(0x0085, 0x0000); 
                //-------------- Panel Control -------------------// 
                LCD_WriteCmdData(0x0090, 0x0010); 
                LCD_WriteCmdData(0x0092, 0x0600); 
                LCD_WriteCmdData(0x0007, 0x0133); // 262K color and display ON 
                
                LCD_WriteCmd(0x0022);
              #endif
 892   1      
 893   1        LCD_Display_Dir(TFTLCD_DIR);    //0：竖屏  1：横屏  默认竖屏
 894   1        LCD_Clear(BACK_COLOR);
 895   1      }
 896          
 897          //设置窗口,并自动设置画点坐标到窗口左上角(sx,sy).
 898          //sx,sy:窗口起始坐标(左上角)
 899          //width,height:窗口宽度和高度,必须大于0!!
 900          //窗体大小:width*height. 
 901          void LCD_Set_Window(u16 sx,u16 sy,u16 width,u16 height)
 902          {
 903   1      #ifdef TFT20_HX8309
                u16 x,y,xy;
                x=(width<<8)|sx;
                y=(height<<8)|sy;
                xy = (sy<<8)|sx;
                if(tftlcd_data.dir==0)  
                {
                  LCD_WriteCmd(0x44);LCD_WriteData(x);
                  LCD_WriteCmd(0x45);LCD_WriteData(y);
                  LCD_WriteCmd(0x21);LCD_WriteData(xy); 
                }
C51 COMPILER V9.60.0.0   TFTLCD                                                            01/14/2022 13:04:02 PAGE 16  

                else
                {
                  xy = (sx<<8)|sy;
                  LCD_WriteCmd(0x45);LCD_WriteData(x);
                  LCD_WriteCmd(0x44);LCD_WriteData(y);
                  LCD_WriteCmd(0x21);LCD_WriteData(xy);
                }
                LCD_WriteCmd(0x22);
              #endif
 923   1      
 924   1      #ifdef TFT22_R61503B
 925   1        if(tftlcd_data.dir==0)  
 926   1        {
 927   2          LCD_WriteCmd(0x0050);
 928   2          LCD_WriteData(sx);       
 929   2          LCD_WriteCmd(0x0051);
 930   2          LCD_WriteData(width);  
 931   2          LCD_WriteCmd(0x0052);
 932   2          LCD_WriteData(sy);
 933   2          LCD_WriteCmd(0x0053);
 934   2          LCD_WriteData(height);
 935   2      
 936   2          LCD_WriteCmd(0x0020);
 937   2          LCD_WriteData(sx);
 938   2          LCD_WriteCmd(0x0021);
 939   2          LCD_WriteData(sy);
 940   2      
 941   2          LCD_WriteCmd(0x0022);
 942   2        
 943   2        }
 944   1        else
 945   1        {
 946   2          LCD_WriteCmd(0x0052);
 947   2          LCD_WriteData(sx);       
 948   2          LCD_WriteCmd(0x0053);
 949   2          LCD_WriteData(width);  
 950   2          LCD_WriteCmd(0x0050);
 951   2          LCD_WriteData(sy);
 952   2          LCD_WriteCmd(0x0051);
 953   2          LCD_WriteData(height);
 954   2      
 955   2          LCD_WriteCmd(0x0021);
 956   2          LCD_WriteData(sx);
 957   2          LCD_WriteCmd(0x0020);
 958   2          LCD_WriteData(sy);
 959   2      
 960   2          LCD_WriteCmd(0x0022);
 961   2        }
 962   1      #endif
 963   1        
 964   1      #ifdef TFT22_ILI9225B
                if(tftlcd_data.dir==0)  
                {
                  LCD_WriteCmdData(0x0037, sx);
                  LCD_WriteCmdData(0x0036, width); 
                  LCD_WriteCmdData(0x0039, sy);
                  LCD_WriteCmdData(0x0038, height);
                
                  LCD_WriteCmdData(0x0020, sx);
                  LCD_WriteCmdData(0x0021, sy);
                
                  LCD_WriteCmd(0x0022);
C51 COMPILER V9.60.0.0   TFTLCD                                                            01/14/2022 13:04:02 PAGE 17  

                }
                else
                {
                  LCD_WriteCmdData(0x0039, sx);
                  LCD_WriteCmdData(0x0038, width); 
                  LCD_WriteCmdData(0x0037, sy);
                  LCD_WriteCmdData(0x0036, height);
                
                  LCD_WriteCmdData(0x0021, sx);
                  LCD_WriteCmdData(0x0020, sy);
                
                  LCD_WriteCmd(0x0022);
                }
              #endif
 990   1      
 991   1      #ifdef TFT24_ST7781R
                if(tftlcd_data.dir==0)  
                {
                  LCD_WriteCmdData(0x0050, sx); // Horizontal Address Start Position
                  LCD_WriteCmdData(0x0051, width); // Horizontal Address End Position
                  LCD_WriteCmdData(0x0052, sy); // Vertical Address Start Position
                  LCD_WriteCmdData(0x0053, height); // Vertical Address End Position
                
                  LCD_WriteCmdData(0x0020, sx); // Horizontal Address Start Position
                  LCD_WriteCmdData(0x0021, sy); // Vertical Address Start Position
                  LCD_WriteCmd(0x0022);   
                }
                else
                {
                  LCD_WriteCmdData(0x0052, sx); // Horizontal Address Start Position
                  LCD_WriteCmdData(0x0053, width); // Horizontal Address End Position
                  LCD_WriteCmdData(0x0050, sy); // Vertical Address Start Position
                  LCD_WriteCmdData(0x0051, height); // Vertical Address End Position
                
                  LCD_WriteCmdData(0x0021, sx); // Horizontal Address Start Position
                  LCD_WriteCmdData(0x0020, sy); // Vertical Address Start Position
                  LCD_WriteCmd(0x0022); 
                } 
              #endif
1015   1      
1016   1      #ifdef TFT26_R61509V
                if(tftlcd_data.dir==0)  
                {
                  LCD_WriteCmd(0x0210);   LCD_WriteData(sx);
                  LCD_WriteCmd(0x0211);   LCD_WriteData(width);
                  LCD_WriteCmd(0x0212);   LCD_WriteData(sy);
                  LCD_WriteCmd(0x0213);   LCD_WriteData(height);
                
                  LCD_WriteCmd(0x0200);   LCD_WriteData(sx);
                  LCD_WriteCmd(0x0201);   LCD_WriteData(sy);
                
                  LCD_WriteCmd(0x0202);
                }
                else
                {
                  LCD_WriteCmd(0x0212);   LCD_WriteData(sx);
                  LCD_WriteCmd(0x0213);   LCD_WriteData(width);
                  LCD_WriteCmd(0x0210);   LCD_WriteData(sy);
                  LCD_WriteCmd(0x0211);   LCD_WriteData(height);
                
                  LCD_WriteCmd(0x0201);   LCD_WriteData(sx);
                  LCD_WriteCmd(0x0200);   LCD_WriteData(sy);
C51 COMPILER V9.60.0.0   TFTLCD                                                            01/14/2022 13:04:02 PAGE 18  

                
                  LCD_WriteCmd(0x0202);
                }
              #endif
1042   1      
1043   1      #ifdef TFT26_ILI9325D
                if(tftlcd_data.dir==0)  
                {
                  LCD_WriteCmdData(0x0050, sx); // Horizontal GRAM Start Address 
                  LCD_WriteCmdData(0x0051, width); // Horizontal GRAM End Address 
                  LCD_WriteCmdData(0x0052, sy); // Vertical GRAM Start Address 
                  LCD_WriteCmdData(0x0053, height); // Vertical GRAM Start Address 
                
                  LCD_WriteCmdData(0x0020, sx); // GRAM horizontal Address 
                  LCD_WriteCmdData(0x0021, sy); // GRAM Vertical Address
                  LCD_WriteCmd(0x0022);
                }
                else
                {
                  LCD_WriteCmdData(0x0052, sx); // Horizontal GRAM Start Address 
                  LCD_WriteCmdData(0x0053, width); // Horizontal GRAM End Address 
                  LCD_WriteCmdData(0x0050, sy); // Vertical GRAM Start Address 
                  LCD_WriteCmdData(0x0051, height); // Vertical GRAM Start Address 
                
                  LCD_WriteCmdData(0x0021, sx); // GRAM horizontal Address 
                  LCD_WriteCmdData(0x0020, sy); // GRAM Vertical Address
                  LCD_WriteCmd(0x0022);
                }
              #endif
1067   1      
1068   1      }
1069          
1070          //读取个某点的颜色值   
1071          //x,y:坐标
1072          //返回值:此点的颜色
1073          u16 LCD_ReadPoint(u16 x,u16 y)
1074          {
1075   1       u16 r=0,g=0x0001,b=0x0001,dat;
1076   1        if(x>=tftlcd_data.width||y>=tftlcd_data.height)return 0;  //超过了范围,直接返回        
1077   1        LCD_Set_Window(x, y, x, y);
1078   1        
1079   1      #ifdef TFT22_R61503B
1080   1        
1081   1      
1082   1        //LCD_Set_Window(x, y, x, y);
1083   1        dat=LCD_ReadData();     //dummy Read
1084   1        dat=LCD_ReadData();
1085   1      
1086   1          
1087   1        b=dat>>11;         
1088   1        g=(dat>>5)&0x003f;
1089   1        r=dat&0x001f;
1090   1        dat=(r<<11)|(g<<5)|(b); 
1091   1                         
1092   1        r=dat;
1093   1                       
1094   1        
1095   1      #endif
1096   1      
1097   1      #ifdef TFT22_ILI9225B 
                LCD_WriteCmd(0X0022);                      
                r=LCD_ReadData();     //dummy Read
C51 COMPILER V9.60.0.0   TFTLCD                                                            01/14/2022 13:04:02 PAGE 19  

                r=LCD_ReadData();     //dummy Read
                r=LCD_ReadData();     //实际坐标颜色
              #endif
1103   1      
1104   1      #ifdef TFT24_ST7781R  
                LCD_WriteCmd(0X0022);
                r=LCD_ReadData();     //dummy Read                         
                r=LCD_ReadData();     //实际坐标颜色
              #endif
1109   1      
1110   1      #ifdef TFT26_R61509V  
                LCD_WriteCmd(0X0202);                      
                r=LCD_ReadData();     //dummy Read
                r=LCD_ReadData();     //dummy Read
                r=LCD_ReadData();     //实际坐标颜色
              #endif
1116   1        
1117   1      #ifdef TFT26_ILI9325D 
                LCD_WriteCmd(0X0022);
                r=LCD_ReadData();     //dummy Read                         
                r=LCD_ReadData();     //实际坐标颜色
              #endif  
1122   1      
1123   1        return r;
1124   1      }
1125          
1126          //清屏函数
1127          //color:要清屏的填充色
1128          void LCD_Clear(u16 color)
1129          {
1130   1        u16 i=0, j=0 ;
1131   1      
1132   1        LCD_Set_Window(0, 0, tftlcd_data.width-1, tftlcd_data.height-1);   //作用区域
1133   1          for(i=0; i<tftlcd_data.width; i++)
1134   1        {
1135   2          for (j=0; j<tftlcd_data.height; j++)
1136   2          {
1137   3            LCD_WriteData_Color(color);
1138   3          }
1139   2        } 
1140   1      }
1141          
1142          //在指定区域内填充单个颜色
1143          //(sx,sy),(ex,ey):填充矩形对角坐标,区域大小为:(ex-sx+1)*(ey-sy+1)   
1144          //color:要填充的颜色
1145          void LCD_Fill(u16 xState,u16 yState,u16 xEnd,u16 yEnd,u16 color)
1146          {          
1147   1        u16 temp=0;
1148   1      
1149   1          if((xState > xEnd) || (yState > yEnd))
1150   1          {
1151   2              return;
1152   2          }   
1153   1        LCD_Set_Window(xState, yState, xEnd, yEnd); 
1154   1          xState = xEnd - xState + 1;
1155   1        yState = yEnd - yState + 1;
1156   1      
1157   1        while(xState--)
1158   1        {
1159   2          temp = yState;
1160   2          while (temp--)
1161   2          {     
C51 COMPILER V9.60.0.0   TFTLCD                                                            01/14/2022 13:04:02 PAGE 20  

1162   3            LCD_WriteData_Color(color); 
1163   3          }
1164   2        } 
1165   1      } 
1166          
1167          //在指定区域内填充指定颜色块       
1168          //(sx,sy),(ex,ey):填充矩形对角坐标,区域大小为:(ex-sx+1)*(ey-sy+1)   
1169          //color:要填充的颜色
1170          void LCD_Color_Fill(u16 sx,u16 sy,u16 ex,u16 ey,u16 *color)
1171          {  
1172   1        u16 height,width;
1173   1        u16 i,j;
1174   1        width=ex-sx+1;      //得到填充的宽度
1175   1        height=ey-sy+1;     //高度
1176   1        LCD_Set_Window(sx, sy,ex, ey);
1177   1        for(i=0;i<height;i++)
1178   1        {
1179   2          for(j=0;j<width;j++)
1180   2          {
1181   3            LCD_WriteData_Color(color[i*width+j]);
1182   3          }
1183   2        }       
1184   1      }
1185          
1186          //画点
1187          //x,y:坐标
1188          //FRONT_COLOR:此点的颜色
1189          void LCD_DrawPoint(u16 x,u16 y)
1190          {
1191   1        LCD_Set_Window(x, y, x, y);  //设置点的位置
1192   1        LCD_WriteData_Color(FRONT_COLOR); 
1193   1      }
1194          
1195          //快速画点
1196          //x,y:坐标
1197          //color:颜色
1198          void LCD_DrawFRONT_COLOR(u16 x,u16 y,u16 color)
1199          {    
1200   1        LCD_Set_Window(x, y, x, y);
1201   1        LCD_WriteData_Color(color); 
1202   1      } 
1203          
1204          //画一个大点
1205          //2*2的点        
1206          void LCD_DrawBigPoint(u16 x,u16 y,u16 color)
1207          {     
1208   1        LCD_DrawFRONT_COLOR(x,y,color);//中心点 
1209   1        LCD_DrawFRONT_COLOR(x+1,y,color);
1210   1        LCD_DrawFRONT_COLOR(x,y+1,color);
1211   1        LCD_DrawFRONT_COLOR(x+1,y+1,color);       
1212   1      }
1213          
1214          //画线
1215          //x1,y1:起点坐标
1216          //x2,y2:终点坐标  
1217          void LCD_DrawLine(u16 x1, u16 y1, u16 x2, u16 y2)
1218          {
1219   1        u16 t=0; 
1220   1        int xerr=0,yerr=0,delta_x,delta_y,distance; 
1221   1        int incx,incy,uRow,uCol; 
1222   1        delta_x=x2-x1; //计算坐标增量 
1223   1        delta_y=y2-y1; 
C51 COMPILER V9.60.0.0   TFTLCD                                                            01/14/2022 13:04:02 PAGE 21  

1224   1        uRow=x1; 
1225   1        uCol=y1; 
1226   1        if(delta_x>0)incx=1; //设置单步方向 
1227   1        else if(delta_x==0)incx=0;//垂直线 
1228   1        else {incx=-1;delta_x=-delta_x;} 
1229   1        if(delta_y>0)incy=1; 
1230   1        else if(delta_y==0)incy=0;//水平线 
1231   1        else{incy=-1;delta_y=-delta_y;} 
1232   1        if( delta_x>delta_y)distance=delta_x; //选取基本增量坐标轴 
1233   1        else distance=delta_y; 
1234   1        for(t=0;t<=distance+1;t++ )//画线输出 
1235   1        {  
1236   2          LCD_DrawPoint(uRow,uCol);//画点 
1237   2          xerr+=delta_x ; 
1238   2          yerr+=delta_y ; 
1239   2          if(xerr>distance) 
1240   2          { 
1241   3            xerr-=distance; 
1242   3            uRow+=incx; 
1243   3          } 
1244   2          if(yerr>distance) 
1245   2          { 
1246   3            yerr-=distance; 
1247   3            uCol+=incy; 
1248   3          } 
1249   2        }  
1250   1      } 
1251          
1252          void LCD_DrawLine_Color(u16 x1, u16 y1, u16 x2, u16 y2,u16 color)
1253          {
1254   1        u16 t; 
1255   1        int xerr=0,yerr=0,delta_x,delta_y,distance; 
1256   1        int incx,incy,uRow,uCol; 
1257   1        delta_x=x2-x1; //计算坐标增量 
1258   1        delta_y=y2-y1; 
1259   1        uRow=x1; 
1260   1        uCol=y1; 
1261   1        if(delta_x>0)incx=1; //设置单步方向 
1262   1        else if(delta_x==0)incx=0;//垂直线 
1263   1        else {incx=-1;delta_x=-delta_x;} 
1264   1        if(delta_y>0)incy=1; 
1265   1        else if(delta_y==0)incy=0;//水平线 
1266   1        else{incy=-1;delta_y=-delta_y;} 
1267   1        if( delta_x>delta_y)distance=delta_x; //选取基本增量坐标轴 
1268   1        else distance=delta_y; 
1269   1        for(t=0;t<=distance+1;t++ )//画线输出 
1270   1        {  
1271   2          LCD_DrawFRONT_COLOR(uRow,uCol,color);//画点 
1272   2          xerr+=delta_x ; 
1273   2          yerr+=delta_y ; 
1274   2          if(xerr>distance) 
1275   2          { 
1276   3            xerr-=distance; 
1277   3            uRow+=incx; 
1278   3          } 
1279   2          if(yerr>distance) 
1280   2          { 
1281   3            yerr-=distance; 
1282   3            uCol+=incy; 
1283   3          } 
1284   2        }  
1285   1      } 
C51 COMPILER V9.60.0.0   TFTLCD                                                            01/14/2022 13:04:02 PAGE 22  

1286          
1287          
1288          // 画一个十字的标记
1289          // x：标记的X坐标
1290          // y：标记的Y坐标
1291          // color：标记的颜色
1292          void LCD_DrowSign(u16 x, u16 y, u16 color)
1293          {
1294   1          u8 i;
1295   1      
1296   1          /* 画点 */
1297   1          LCD_Set_Window(x-1, y-1, x+1, y+1);
1298   1          for(i=0; i<9; i++)
1299   1          {
1300   2          LCD_WriteData_Color(color);   
1301   2          }
1302   1      
1303   1          /* 画竖 */
1304   1          LCD_Set_Window(x-4, y, x+4, y);
1305   1          for(i=0; i<9; i++)
1306   1          {
1307   2          LCD_WriteData_Color(color); 
1308   2          }
1309   1      
1310   1          /* 画横 */
1311   1          LCD_Set_Window(x, y-4, x, y+4);
1312   1          for(i=0; i<9; i++)
1313   1          {
1314   2          LCD_WriteData_Color(color); 
1315   2          }
1316   1      }
1317          
1318          //画矩形    
1319          //(x1,y1),(x2,y2):矩形的对角坐标
1320          void LCD_DrawRectangle(u16 x1, u16 y1, u16 x2, u16 y2)
1321          {
1322   1        LCD_DrawLine(x1,y1,x2,y1);
1323   1        LCD_DrawLine(x1,y1,x1,y2);
1324   1        LCD_DrawLine(x1,y2,x2,y2);
1325   1        LCD_DrawLine(x2,y1,x2,y2);
1326   1      }
1327          //在指定位置画一个指定大小的圆
1328          //(x,y):中心点
1329          //r    :半径
1330          void LCD_Draw_Circle(u16 x0,u16 y0,u8 r)
1331          {
1332   1        int a,b;
1333   1        int di;
1334   1        a=0;b=r;    
1335   1        di=3-(r<<1);             //判断下个点位置的标志
1336   1        while(a<=b)
1337   1        {
1338   2          LCD_DrawPoint(x0+a,y0-b);             //5
1339   2          LCD_DrawPoint(x0+b,y0-a);             //0           
1340   2          LCD_DrawPoint(x0+b,y0+a);             //4               
1341   2          LCD_DrawPoint(x0+a,y0+b);             //6 
1342   2          LCD_DrawPoint(x0-a,y0+b);             //1       
1343   2          LCD_DrawPoint(x0-b,y0+a);             
1344   2          LCD_DrawPoint(x0-a,y0-b);             //2             
1345   2            LCD_DrawPoint(x0-b,y0-a);             //7                
1346   2          a++;
1347   2          //使用Bresenham算法画圆     
C51 COMPILER V9.60.0.0   TFTLCD                                                            01/14/2022 13:04:02 PAGE 23  

1348   2          if(di<0)di +=4*a+6;   
1349   2          else
1350   2          {
1351   3            di+=10+4*(a-b);   
1352   3            b--;
1353   3          }                 
1354   2        }
1355   1      } 
1356          
1357          
1358          //在指定位置显示一个字符
1359          //x,y:起始坐标
1360          //num:要显示的字符:" "--->"~"
1361          //size:字体大小 12/16/24
1362          //mode:叠加方式(1)还是非叠加方式(0)
1363          void LCD_ShowChar(u16 x,u16 y,u8 num,u8 size,u8 mode)
1364          {                 
1365   1          u8 temp,t1,t;
1366   1        u16 y0=y;
1367   1        u8 csize=(size/8+((size%8)?1:0))*(size/2);    //得到字体一个字符对应点阵集所占的字节数  
1368   1        num=num-' ';//得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
1369   1        for(t=0;t<csize;t++)
1370   1        {   
1371   2          if(size==12)temp=ascii_1206[num][t];    //调用1206字体
1372   2          else if(size==16)temp=ascii_1608[num][t]; //调用1608字体
1373   2          else if(size==24)temp=ascii_2412[num][t]; //调用2412字体
1374   2          else return;                //没有的字库
1375   2          for(t1=0;t1<8;t1++)
1376   2          {         
1377   3            if(temp&0x80)LCD_DrawFRONT_COLOR(x,y,FRONT_COLOR);
1378   3            else if(mode==0)LCD_DrawFRONT_COLOR(x,y,BACK_COLOR);
1379   3            temp<<=1;
1380   3            y++;
1381   3            if(y>=tftlcd_data.height)return;    //超区域了
1382   3            if((y-y0)==size)
1383   3            {
1384   4              y=y0;
1385   4              x++;
1386   4              if(x>=tftlcd_data.width)return; //超区域了
1387   4              break;
1388   4            }
1389   3          }    
1390   2        }                 
1391   1      }   
1392          //m^n函数
1393          //返回值:m^n次方.
1394          u32 LCD_Pow(u8 m,u8 n)
1395          {
1396   1        u32 result=1;  
1397   1        while(n--)result*=m;    
1398   1        return result;
1399   1      }      
1400          //显示数字,高位为0,则不显示
1401          //x,y :起点坐标  
1402          //len :数字的位数
1403          //size:字体大小
1404          //color:颜色 
1405          //num:数值(0~4294967295);  
1406          void LCD_ShowNum(u16 x,u16 y,u32 num,u8 len,u8 size)
1407          {           
1408   1        u8 t,temp;
1409   1        u8 enshow=0;               
C51 COMPILER V9.60.0.0   TFTLCD                                                            01/14/2022 13:04:02 PAGE 24  

1410   1        for(t=0;t<len;t++)
1411   1        {
1412   2          temp=(num/LCD_Pow(10,len-t-1))%10;
1413   2          if(enshow==0&&t<(len-1))
1414   2          {
1415   3            if(temp==0)
1416   3            {
1417   4              LCD_ShowChar(x+(size/2)*t,y,' ',size,0);
1418   4              continue;
1419   4            }else enshow=1; 
1420   3             
1421   3          }
1422   2          LCD_ShowChar(x+(size/2)*t,y,temp+'0',size,0); 
1423   2        }
1424   1      } 
1425          
1426          //显示数字,高位为0,还是显示
1427          //x,y:起点坐标
1428          //num:数值(0~999999999);   
1429          //len:长度(即要显示的位数)
1430          //size:字体大小
1431          //mode:
1432          //[7]:0,不填充;1,填充0.
1433          //[6:1]:保留
1434          //[0]:0,非叠加显示;1,叠加显示.
1435          void LCD_ShowxNum(u16 x,u16 y,u32 num,u8 len,u8 size,u8 mode)
1436          {  
1437   1        u8 t,temp;
1438   1        u8 enshow=0;               
1439   1        for(t=0;t<len;t++)
1440   1        {
1441   2          temp=(num/LCD_Pow(10,len-t-1))%10;
1442   2          if(enshow==0&&t<(len-1))
1443   2          {
1444   3            if(temp==0)
1445   3            {
1446   4              if(mode&0X80)LCD_ShowChar(x+(size/2)*t,y,'0',size,mode&0X01);  
1447   4              else LCD_ShowChar(x+(size/2)*t,y,' ',size,mode&0X01);  
1448   4              continue;
1449   4            }else enshow=1; 
1450   3             
1451   3          }
1452   2          LCD_ShowChar(x+(size/2)*t,y,temp+'0',size,mode&0X01); 
1453   2        }
1454   1      } 
1455          //显示字符串
1456          //x,y:起点坐标
1457          //width,height:区域大小  
1458          //size:字体大小
1459          //*p:字符串起始地址     
1460          void LCD_ShowString(u16 x,u16 y,u16 width,u16 height,u8 size,u8 *p)
1461          {         
1462   1        u8 x0=x;
1463   1        width+=x;
1464   1        height+=y;
1465   1          while((*p<='~')&&(*p>=' '))//判断是不是非法字符!
1466   1          {       
1467   2              if(x>=width){x=x0;y+=size;}
1468   2              if(y>=height)break;//退出
1469   2              LCD_ShowChar(x,y,*p,size,0);
1470   2              x+=size/2;
1471   2              p++;
C51 COMPILER V9.60.0.0   TFTLCD                                                            01/14/2022 13:04:02 PAGE 25  

1472   2          }  
1473   1      }
1474          
1475          /****************************************************************************
1476          *函数名：LCD_ShowFontHZ
1477          *输  入：x：汉字显示的X坐标
1478          *      * y：汉字显示的Y坐标
1479          *      * cn：要显示的汉字
1480          *      * wordColor：文字的颜色
1481          *      * backColor：背景颜色
1482          *输  出：
1483          *功  能：写二号楷体汉字
1484          ****************************************************************************/
1485          #if 1
1486          void LCD_ShowFontHZ(u16 x, u16 y, u8 *cn)  
1487          {  
1488   1        u8 i, j, wordNum;
1489   1        u16 color;
1490   1        while (*cn != '\0')
1491   1        {
1492   2          LCD_Set_Window(x, y, x+31, y+28);
1493   2          for (wordNum=0; wordNum<20; wordNum++)
1494   2          { //wordNum扫描字库的字数
1495   3            if ((CnChar32x29[wordNum].Index[0]==*cn)
1496   3                 &&(CnChar32x29[wordNum].Index[1]==*(cn+1)))
1497   3            {
1498   4              
1499   4              for(i=0; i<116; i++) 
1500   4              { //MSK的位数
1501   5                color=CnChar32x29[wordNum].Msk[i];
1502   5                for(j=0;j<8;j++) 
1503   5                {
1504   6                  if((color&0x80)==0x80)
1505   6                  {
1506   7                    LCD_WriteData_Color(FRONT_COLOR);             
1507   7                  }             
1508   6                  else
1509   6                  {
1510   7                    LCD_WriteData_Color(BACK_COLOR); 
1511   7                  } 
1512   6                  color<<=1;
1513   6                }//for(j=0;j<8;j++)结束
1514   5              }    
1515   4            }
1516   3          } //for (wordNum=0; wordNum<20; wordNum++)结束  
1517   2          cn += 2;
1518   2          x += 32;
1519   2        }
1520   1      }
1521          #endif
1522          
1523          
1524          #if 0
              void LCD_ShowFontHZ(u16 x, u16 y, u8 *cn)
              {
                u8 i, j, wordNum;
                u16 color;
                u16 x0=x; 
                u16 y0=y; 
                while (*cn != '\0')
                {
                  for (wordNum=0; wordNum<20; wordNum++)
C51 COMPILER V9.60.0.0   TFTLCD                                                            01/14/2022 13:04:02 PAGE 26  

                  { //wordNum扫描字库的字数
                    if ((CnChar32x29[wordNum].Index[0]==*cn)
                         &&(CnChar32x29[wordNum].Index[1]==*(cn+1)))
                    {
                      for(i=0; i<116; i++) 
                      { //MSK的位数
                        color=CnChar32x29[wordNum].Msk[i];
                        for(j=0;j<8;j++) 
                        {
                          if((color&0x80)==0x80)
                          {
                            LCD_DrawFRONT_COLOR(x,y,FRONT_COLOR);
                          }             
                          else
                          {
                            LCD_DrawFRONT_COLOR(x,y,BACK_COLOR);
                          } 
                          color<<=1;
                          x++;
                          if((x-x0)==32)
                          {
                            x=x0;
                            y++;
                            if((y-y0)==29)
                            {
                              y=y0;
                            }
                          }
                        }//for(j=0;j<8;j++)结束
                      } 
                    }
                    
                  } //for (wordNum=0; wordNum<20; wordNum++)结束  
                  cn += 2;
                  x += 32;
                  x0=x;
                }
              } 
              #endif
1573          
1574          void LCD_ShowPicture(u16 x, u16 y, u16 wide, u16 high,u8 *pic)
1575          {
1576   1        u16 temp = 0;
1577   1        long tmp=0,num=0;
1578   1        LCD_Set_Window(x, y, x+wide-1, y+high-1);
1579   1        num = wide * high*2 ;
1580   1        do
1581   1        {  
1582   2          temp = pic[tmp + 1];
1583   2          temp = temp << 8;
1584   2          temp = temp | pic[tmp];
1585   2          LCD_WriteData_Color(temp);//逐点显示
1586   2          tmp += 2;
1587   2        }
1588   1        while(tmp < num); 
1589   1      }
1590          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   5750    ----
   CONSTANT SIZE    =   7142    ----
C51 COMPILER V9.60.0.0   TFTLCD                                                            01/14/2022 13:04:02 PAGE 27  

   XDATA SIZE       =     11     236
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
